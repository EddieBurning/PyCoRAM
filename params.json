{"name":"PyCoRAM","tagline":"Python-based Portable IP-core Synthesis Framework for FPGA-based Computing","body":"Publication\r\n==============================\r\n\r\nIf you use PyCoRAM in your research, please cite our paper.\r\n\r\n- Shinya Takamaeda-Yamazaki, Kenji Kise and James C. Hoe: PyCoRAM: Yet Another Implementation of CoRAM Memory Architecture for Modern FPGA-based Computing, The Third Workshop on the Intersections of Computer Architecture and Reconfigurable Logic (CARL 2013) (Co-located with MICRO-46), December 2013. [Paper](http://users.ece.cmu.edu/~jhoe/distribution/2013/carl13pycoram.pdf)\r\n[Slide](http://www.slideshare.net/shtaxxx/pycoramcarl2013)\r\n\r\n```\r\n@inproceedings{Takamaeda:2013:CARL:PyCoRAM,\r\nauthor = {Takamaeda-Yamazaki, Shinya and Kise, Kenji and Hoe, James C.},\r\ntitle = {{PyCoRAM: Yet Another Implementation of CoRAM Memory Architecture for Modern FPGA-based Computing}},\r\nbooktitle={Intersections of Computer Architecture and Reconfigurable Logic (CARL 2013)},\r\nmonth={Dec},\r\nyear = {2013},\r\nlocation = {Davis, CA},\r\n} \r\n```\r\n\r\n- Zynq + PyCoRAM (+ Debian) (slideshare, in Japanese)\r\n[Slide](http://www.slideshare.net/shtaxxx/zynqpycoram)\r\n\r\n- PyCoRAM for HLS meet up (slideshare, in Japanese)\r\n[Slide](http://www.slideshare.net/shtaxxx/pycoram20150116hls)\r\n\r\n\r\nWhat's PyCoRAM?\r\n==============================\r\n\r\nPyCoRAM is a Python-based portable IP-core synthesis framework with CoRAM (Connected RAM) memory architecture.\r\n\r\nPyCoRAM framework generates a portable IP-core package from computing logic descriptions in Verilog HDL and memory access pattern descriptions in Python. Designers can easily build an FPGA-based custom accelerator using a generated IP-core with any common IP-cores on vendor-provided EDA tools. PyCoRAM framework includes (1) the Verilog-to-Verilog design translation compiler and (2) the Python-to-Verilog high-level synthesis (HLS) compiler for generating control circuits of memory operations.\r\n\r\nThere are some major differences between PyCoRAM and the original soft-logic implementation of CoRAM.\r\n\r\n* Memory access pattern representation in Python\r\n    - The original CoRAM uses C language to represent a memory access pattern (called 'control thread').\r\n    - In PyCoRAM, you can easily describe them by using popular lightweight scripting language.\r\n    - A Python script of memory access patterns is translated into an RT-level hardware design in Verilog HDL by the Python-to-Verilog high-level synthesis compiler.\r\n* Commercial interconnect supports (AMBA AXI4 and Altera Avalon)\r\n    - The original CoRAM uses CONNECT to generate an on-chip interconnect.\r\n    - PyCoRAM compiler generates a IP-core design with AMBA AXI4 or Altera Avalon. Both are commonly used on vendor-provided EDA tools.\r\n* Parameterized RTL Design Support\r\n    - The original CoRAM has some limitations in Verilog HDL description of computing logic, such as no supports of generate statement.\r\n    - PyCoRAM has a sophisticated RTL analyzer/translator to convert RTL descriptions into synthesizable IP-core package under memory abstractions of CoRAM.\r\n\r\n\r\nLicense\r\n==============================\r\n\r\nApache License 2.0\r\n(http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\n\r\nCopyright and Contact\r\n==============================\r\n\r\nCopyright (C) 2013, Shinya Takamaeda-Yamazaki\r\n\r\nE-mail: shinya\\_at\\_is.naist.jp\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}