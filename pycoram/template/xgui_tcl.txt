# Definitional proc to organize widgets for parameters.
proc init_gui { IPINST } {
  ipgui::add_param $IPINST -name "Component_Name"
  #Adding Page
  set Page_0 [ipgui::add_page $IPINST -name "Page 0"]

{%- for thread in threads | sort(attribute='name') %}
{%- for memory in thread.memories | sort(attribute='name') %}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR" -parent ${Page_0}]
  set_property tooltip {Base address of targeted slave} ${C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN" -parent ${Page_0} -widget comboBox]
  set_property tooltip {Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths} ${C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH" -parent ${Page_0}]
  set_property tooltip {Thread ID Width} ${C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Address Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Data Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Address Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Address Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Data Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Data Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH}
  set C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Response Bus} ${C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH}
{% endfor %}
{%- for instream in thread.instreams | sort(attribute='name') %}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_TARGET_SLAVE_BASE_ADDR [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_TARGET_SLAVE_BASE_ADDR" -parent ${Page_0}]
  set_property tooltip {Base address of targeted slave} ${C_{{ thread.name }}_{{ instream.name }}_AXI_TARGET_SLAVE_BASE_ADDR}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_BURST_LEN [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_BURST_LEN" -parent ${Page_0} -widget comboBox]
  set_property tooltip {Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths} ${C_{{ thread.name }}_{{ instream.name }}_AXI_BURST_LEN}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_ID_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_ID_WIDTH" -parent ${Page_0}]
  set_property tooltip {Thread ID Width} ${C_{{ thread.name }}_{{ instream.name }}_AXI_ID_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_ADDR_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_ADDR_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Address Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_ADDR_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_DATA_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_DATA_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Data Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_DATA_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_AWUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_AWUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Address Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_AWUSER_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_ARUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_ARUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Address Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_ARUSER_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_WUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_WUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Data Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_WUSER_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_RUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_RUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Data Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_RUSER_WIDTH}
  set C_{{ thread.name }}_{{ instream.name }}_AXI_BUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ instream.name }}_AXI_BUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Response Bus} ${C_{{ thread.name }}_{{ instream.name }}_AXI_BUSER_WIDTH}
{% endfor %}
{%- for outstream in thread.outstreams | sort(attribute='name') %}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_TARGET_SLAVE_BASE_ADDR [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_TARGET_SLAVE_BASE_ADDR" -parent ${Page_0}]
  set_property tooltip {Base address of targeted slave} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_TARGET_SLAVE_BASE_ADDR}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_BURST_LEN [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_BURST_LEN" -parent ${Page_0} -widget comboBox]
  set_property tooltip {Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_BURST_LEN}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_ID_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_ID_WIDTH" -parent ${Page_0}]
  set_property tooltip {Thread ID Width} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_ID_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_ADDR_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_ADDR_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Address Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_ADDR_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_DATA_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_DATA_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Data Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_DATA_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_AWUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_AWUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Address Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_AWUSER_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_ARUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_ARUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Address Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_ARUSER_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_WUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_WUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Data Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_WUSER_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_RUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_RUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Data Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_RUSER_WIDTH}
  set C_{{ thread.name }}_{{ outstream.name }}_AXI_BUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ outstream.name }}_AXI_BUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Response Bus} ${C_{{ thread.name }}_{{ outstream.name }}_AXI_BUSER_WIDTH}
{% endfor %}
{%- for iochannel in thread.iochannels | sort(attribute='name') %}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_BURST_LEN [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_BURST_LEN" -parent ${Page_0} -widget comboBox]
  set_property tooltip {Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_BURST_LEN}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_ID_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_ID_WIDTH" -parent ${Page_0}]
  set_property tooltip {Thread ID Width} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_ID_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_ADDR_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_ADDR_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Address Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_ADDR_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_DATA_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_DATA_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Data Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_DATA_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_AWUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_AWUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Address Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_AWUSER_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_ARUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_ARUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Address Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_ARUSER_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_WUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_WUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Data Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_WUSER_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_RUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_RUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Data Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_RUSER_WIDTH}
  set C_{{ thread.name }}_{{ iochannel.name }}_AXI_BUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_BUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Response Bus} ${C_{{ thread.name }}_{{ iochannel.name }}_AXI_BUSER_WIDTH}
  ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_BASEADDR" -parent ${Page_0}
  ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ iochannel.name }}_AXI_HIGHADDR" -parent ${Page_0}
{% endfor %}
{%- for ioregister in thread.ioregisters | sort(attribute='name') %}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_BURST_LEN [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_BURST_LEN" -parent ${Page_0} -widget comboBox]
  set_property tooltip {Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_BURST_LEN}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_ID_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_ID_WIDTH" -parent ${Page_0}]
  set_property tooltip {Thread ID Width} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_ID_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_ADDR_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_ADDR_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Address Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_ADDR_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_DATA_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_DATA_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of Data Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_DATA_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_AWUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_AWUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Address Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_AWUSER_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_ARUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_ARUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Address Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_ARUSER_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_WUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_WUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Write Data Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_WUSER_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_RUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_RUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Read Data Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_RUSER_WIDTH}
  set C_{{ thread.name }}_{{ ioregister.name }}_AXI_BUSER_WIDTH [ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_BUSER_WIDTH" -parent ${Page_0}]
  set_property tooltip {Width of User Response Bus} ${C_{{ thread.name }}_{{ ioregister.name }}_AXI_BUSER_WIDTH}
  ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_BASEADDR" -parent ${Page_0}
  ipgui::add_param $IPINST -name "C_{{ thread.name }}_{{ ioregister.name }}_AXI_HIGHADDR" -parent ${Page_0}
{% endfor %}
{% endfor %}
}

{%- for thread in threads | sort(attribute='name') %}
{%- for memory in thread.memories | sort(attribute='name') %}
proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH
	return true
}

proc update_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH } {
	# Procedure called to update C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH { PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH } {
	# Procedure called to validate C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH
	return true
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_TARGET_SLAVE_BASE_ADDR}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BURST_LEN}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ID_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ADDR_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_DATA_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_AWUSER_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_ARUSER_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_WUSER_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_RUSER_WIDTH}
}

proc update_MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH { MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH}] ${MODELPARAM_VALUE.C_{{ thread.name }}_{{ memory.name }}_AXI_BUSER_WIDTH}
}
{% endfor %}
{% endfor %}

proc update_PARAM_VALUE.C_S00_AXI_DATA_WIDTH { PARAM_VALUE.C_S00_AXI_DATA_WIDTH } {
	# Procedure called to update C_S00_AXI_DATA_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S00_AXI_DATA_WIDTH { PARAM_VALUE.C_S00_AXI_DATA_WIDTH } {
	# Procedure called to validate C_S00_AXI_DATA_WIDTH
	return true
}

proc update_PARAM_VALUE.C_S00_AXI_ADDR_WIDTH { PARAM_VALUE.C_S00_AXI_ADDR_WIDTH } {
	# Procedure called to update C_S00_AXI_ADDR_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S00_AXI_ADDR_WIDTH { PARAM_VALUE.C_S00_AXI_ADDR_WIDTH } {
	# Procedure called to validate C_S00_AXI_ADDR_WIDTH
	return true
}

proc update_PARAM_VALUE.C_S00_AXI_BASEADDR { PARAM_VALUE.C_S00_AXI_BASEADDR } {
	# Procedure called to update C_S00_AXI_BASEADDR when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S00_AXI_BASEADDR { PARAM_VALUE.C_S00_AXI_BASEADDR } {
	# Procedure called to validate C_S00_AXI_BASEADDR
	return true
}

proc update_PARAM_VALUE.C_S00_AXI_HIGHADDR { PARAM_VALUE.C_S00_AXI_HIGHADDR } {
	# Procedure called to update C_S00_AXI_HIGHADDR when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S00_AXI_HIGHADDR { PARAM_VALUE.C_S00_AXI_HIGHADDR } {
	# Procedure called to validate C_S00_AXI_HIGHADDR
	return true
}

proc update_MODELPARAM_VALUE.C_S00_AXI_DATA_WIDTH { MODELPARAM_VALUE.C_S00_AXI_DATA_WIDTH PARAM_VALUE.C_S00_AXI_DATA_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S00_AXI_DATA_WIDTH}] ${MODELPARAM_VALUE.C_S00_AXI_DATA_WIDTH}
}

proc update_MODELPARAM_VALUE.C_S00_AXI_ADDR_WIDTH { MODELPARAM_VALUE.C_S00_AXI_ADDR_WIDTH PARAM_VALUE.C_S00_AXI_ADDR_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S00_AXI_ADDR_WIDTH}] ${MODELPARAM_VALUE.C_S00_AXI_ADDR_WIDTH}
}
