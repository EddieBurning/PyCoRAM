{%- for thread in threads %}
// Thread "{{ thread.name }}" BEGIN
{% for memory in thread.memories %}
{%- if memory.scattergather %}
// Scatter/Gather ON
{%- endif %}
module DMAC_MEMORY_{{ thread.name }}_{{ memory.name }} #
  (
   //---------------------------------------------------------------------------
   // parameters
   //---------------------------------------------------------------------------
   parameter W_A = {{ memory.addrwidth }}, // word addressing
   parameter W_D = {{ memory.datawidth }}, // power of 2
   parameter W_EXT_A = {{ ext_addrwidth }}, // byte addressing
   parameter W_EXT_D = {{ memory.ext_datawidth }}, // power of 2

   parameter NUM_RANKS = {{ memory.numranks }}, // power of 2
   parameter LOG_NUM_RANKS = {{ memory.lognumranks }},
   parameter NUM_PAGES = {{ memory.numpages }}, // power of 2
   parameter LOG_NUM_PAGES = {{ memory.lognumpages }},

   parameter W_BOUNDARY_A = 12, // for 4KB boundary limitation of AXI
   parameter W_BLEN = {{ ext_burstlen_width }}, //log(MAX_BURST_LEN) + 1
   parameter MAX_BURST_LEN = {{ ext_burstlength }}, // burst length

   parameter CMD_FIFO_ADDR_WIDTH = 4, // Command Buffer
   parameter ASYNC = 1
   )
  (
   //---------------------------------------------------------------------------
   // System I/O
   //---------------------------------------------------------------------------
   input CLK,
   input RST,

   //---------------------------------------------------------------------------
   // External (Data Channel) (Transparent FIFO)
   //---------------------------------------------------------------------------
   output reg [W_EXT_D-1:0] ext_write_data,
   output reg               ext_write_enq,
   input                    ext_write_almost_full,
   input      [W_EXT_D-1:0] ext_read_data,
   output                   ext_read_deq,
   input                    ext_read_empty,
   
   //---------------------------------------------------------------------------
   // External (Address Channel)
   //---------------------------------------------------------------------------
   output reg [W_EXT_A-1:0] ext_addr, // byte addressing
   output reg               ext_read_enable,
   output reg               ext_write_enable,
   output reg [W_BLEN-1:0]  ext_word_size, // in word
   input                    ext_ready,

   //---------------------------------------------------------------------------
   // BRAM
   //---------------------------------------------------------------------------
{%- for bank in range(memory.length) %}
   output reg [W_A-1:0]     core_addr_{{ bank }}, // word addressing
   output reg               core_read_enable_{{ bank }},
   input      [W_D-1:0]     core_read_data_{{ bank }},
   output reg               core_write_enable_{{ bank }}, 
   output reg [W_D-1:0]     core_write_data_{{ bank }},
{% endfor %}

   //---------------------------------------------------------------------------
   // Request Interface from Control Thread (Synchronized to Another clock)
   //---------------------------------------------------------------------------
   input                    req_clk,
   input                    req_rst,
   input [W_EXT_A-1:0]      req_ext_addr, // byte addressing
   input [W_EXT_A-1:0]      req_core_addr, // word addressing
   input                    req_read_enable,
   input                    req_write_enable,
   input [W_EXT_A:0]        req_word_size, // word
   output                   req_ready,
   output                   req_busy
   );

  //----------------------------------------------------------------------------
  // localparams
  //----------------------------------------------------------------------------
  localparam EXT_SIZE_OFFSET = {{ int(log(memory.ext_datawidth/8, 2)) }};

  //----------------------------------------------------------------------------
  // State Machine 
  //----------------------------------------------------------------------------
  localparam ST_IDLE = 0;
  localparam ST_WRITE_TO_BRAM = 1;
  localparam ST_READ_FROM_BRAM = 2;
  reg [2:0] state;

  //----------------------------------------------------------------------------
  // Command Queue
  //----------------------------------------------------------------------------
  // newest command
  wire [W_EXT_A-1:0] req_tail_ext_addr;
  wire [W_EXT_A-1:0] req_tail_core_addr;
  wire               req_tail_read_enable;
  wire               req_tail_write_enable;
  wire [W_EXT_A:0]   req_tail_word_size;
  
  // oldest command
  wire [W_EXT_A-1:0] req_head_ext_addr;
  wire [W_EXT_A-1:0] req_head_core_addr;
  wire               req_head_read_enable;
  wire               req_head_write_enable;
  wire [W_EXT_A:0]   req_head_word_size;

  // clock: req_clk
  wire req_enq;
  wire req_full;
  wire req_almost_full;

  // clock: CLK
  reg  req_deq;
  wire req_empty;
  wire req_almost_empty;

  reg local_busy_cdc_from; // CLK
  reg req_busy_reg_cdc_to; // req_clk

  function [W_EXT_A-1:0] addrmask;
    input [W_EXT_A-1:0] in;
    addrmask = { in[W_EXT_A-1:EXT_SIZE_OFFSET], {EXT_SIZE_OFFSET{1'b0}} };
  endfunction
  
  function [W_EXT_A-1:0] get_rest_for_boundary;
    input [W_EXT_A-1:0] addr;
    get_rest_for_boundary = (1 << (W_BOUNDARY_A-EXT_SIZE_OFFSET)) - {1'b0, addr[W_BOUNDARY_A-1:EXT_SIZE_OFFSET]};
  endfunction

  function [W_EXT_A-1:0] min3;
    input [W_EXT_A-1:0] in0;
    input [W_EXT_A-1:0] in1;
    input [W_EXT_A-1:0] in2;
    begin
      min3 = in0;
      if(in1 < min3) min3 = in1;
      if(in2 < min3) min3 = in2;
    end
  endfunction

  assign req_enq = req_read_enable || req_write_enable;
  assign req_tail_ext_addr = req_ext_addr;
  assign req_tail_core_addr = req_core_addr;
  assign req_tail_read_enable = req_read_enable;
  assign req_tail_write_enable = req_write_enable;
  assign req_tail_word_size = req_word_size;

  always @(posedge CLK) begin // CLK
    local_busy_cdc_from <= !(state == ST_IDLE) || !req_empty;
  end
  
  always @(posedge req_clk) begin // req_clk
    req_busy_reg_cdc_to <= local_busy_cdc_from;
  end
  
  generate if(ASYNC) begin
    assign req_busy = req_busy_reg_cdc_to; // req_clk
  end else begin
    assign req_busy = local_busy_cdc_from;
  end endgenerate
  assign req_ready = !req_almost_full; // req_clk

  dmac_memory_cmd_queue #
   (
    .W_EXT_A(W_EXT_A),
    .FIFO_ADDR_WIDTH(CMD_FIFO_ADDR_WIDTH),
    .ASYNC(ASYNC)
   )
  inst_dmac_memory_cmd_queue
   (
    .tail_clk(req_clk),
    .tail_rst(req_rst),
    
    .head_clk(CLK),
    .head_rst(RST),

    .tail_ext_addr(req_tail_ext_addr),
    .tail_core_addr(req_tail_core_addr),
    .tail_read_enable(req_tail_read_enable),
    .tail_write_enable(req_tail_write_enable),
    .tail_word_size(req_tail_word_size),

    .head_ext_addr(req_head_ext_addr),
    .head_core_addr(req_head_core_addr),
    .head_read_enable(req_head_read_enable),
    .head_write_enable(req_head_write_enable),
    .head_word_size(req_head_word_size),

    .enq(req_enq),
    .full(req_full),
    .almost_full(req_almost_full),

    .deq(req_deq),
    .empty(req_empty),
    .almost_empty(req_almost_empty)
   );

  //----------------------------------------------------------------------------
  // Internal Registers
  //----------------------------------------------------------------------------
  reg               read_wait;
  reg               write_wait;
  reg [W_EXT_A:0]   read_count;
  reg [W_EXT_A:0]   write_count;

  reg [W_EXT_A-1:0] cur_ext_addr;
  reg [W_A-1:0]     cur_core_addr;
  reg [W_EXT_A:0]   cur_word_size;

  reg [LOG_NUM_RANKS:0] cur_rank;
  reg [LOG_NUM_RANKS:0] d_cur_rank;
  reg [LOG_NUM_RANKS:0] dd_cur_rank;

{%- if not memory.scattergather %}
  reg [LOG_NUM_PAGES:0] cur_page;
  reg [LOG_NUM_PAGES:0] d_cur_page;
  reg [LOG_NUM_PAGES:0] dd_cur_page;
{%- endif %}

  wire core_write_active;
  wire core_read_active;
  reg d_core_read_active;
  reg dd_core_read_active;

{%- for bank in range(memory.length) %}
  wire bank_write_active_{{ bank }};
  wire bank_read_active_{{ bank }};
{%- endfor %}

  assign core_write_active = read_wait && !ext_read_empty && read_count > 0;
  assign core_read_active = write_wait && !ext_write_almost_full && write_count > 0;

{%- for bank in range(memory.length) %}
{%- if memory.scattergather %}
 {%- if memory.datawidth <= memory.ext_datawidth %}
  assign bank_write_active_{{ bank }} = (cur_rank == {{ int(bank * memory.datawidth / memory.ext_datawidth) }});
 {%- else %}
  assign bank_write_active_{{ bank }} = (cur_rank == {{ int((bank+1) * memory.datawidth / memory.ext_datawidth) -1 }});
 {%- endif %}
  assign bank_read_active_{{ bank }} = (cur_rank == {{ int(bank * memory.datawidth / memory.ext_datawidth) }});
{%- else %}
  assign bank_write_active_{{ bank }} = (cur_rank == {{ memory.numranks -1 }} && (cur_page == {{ bank }}));
  assign bank_read_active_{{ bank }} = (cur_rank == 0 && (cur_page == {{ bank }}));
{%- endif %}
{%- endfor %}

  assign ext_read_deq = (state == ST_WRITE_TO_BRAM) && 
                        read_wait && !ext_read_empty && (read_count > 0);

  //----------------------------------------------------------------------------
  always @(posedge CLK) begin
    if(RST) begin
      state <= ST_IDLE;
      req_deq <= 0;
      ext_addr <= 0;
      ext_read_enable <= 0;
      ext_write_enable <= 0;
      ext_write_enq <= 0;
      ext_write_data <= 0;
{%- for bank in range(memory.length) %}
      core_read_enable_{{ bank }} <= 0;
      core_write_enable_{{ bank }} <= 0;
      core_addr_{{ bank }} <= 0;
      core_write_data_{{ bank }} <= 0;
{%- endfor %}
      cur_ext_addr <= 0;
      cur_core_addr <= 0;
      cur_word_size <= 0;
      cur_rank <= 0;
      d_cur_rank <= 0;
      dd_cur_rank <= 0;
{%- if not memory.scattergather %}
      cur_page <= 0;
      d_cur_page <= 0;
      dd_cur_page <= 0;
{%- endif %}
      d_core_read_active <= 0;
      dd_core_read_active <= 0;
      read_wait <= 0;
      write_wait <= 0;
      read_count <= 0;
      write_count <= 0;
    end else begin
      // default value
      req_deq <= 0;
      ext_write_enq <= 0;
{%- for bank in range(memory.length) %}
      core_read_enable_{{ bank }} <= 0;
      core_write_enable_{{ bank }} <= 0;
{%- endfor %}
     
      // state machine
      case(state)
        //----------------------------------------------------------------------
        ST_IDLE: begin
          if(!req_deq && !req_empty) begin
            req_deq <= 1;
          end
          if(req_deq && req_head_write_enable) begin
            if(req_head_word_size == 0) begin
              // do nothing
            end else begin
              state <= ST_WRITE_TO_BRAM;
            end            

            cur_ext_addr <= addrmask(req_head_ext_addr);

{%- if memory.scattergather %}
            cur_core_addr <= req_head_core_addr;

 {%- if (log(memory.numranks,2) % 1.0) == 0.0 %}
            cur_word_size <= req_head_word_size << LOG_NUM_RANKS;
 {%- else %}
            cur_word_size <= (req_head_word_size << (LOG_NUM_RANKS-1)) + {% for rank in range(memory.numranks - 2**(memory.lognumranks-1)) %}req_head_word_size{% if loop.index < memory.numranks - 2**(memory.lognumranks-1) %} + {% endif %}{% endfor %};
 {%- endif %}

            cur_rank <= 0;
           
{%- else %}
            cur_core_addr <= req_head_core_addr[W_A-1:0];
            cur_word_size <= req_head_word_size << LOG_NUM_RANKS;

            cur_rank <= 0;
            cur_page <= req_head_core_addr >> W_A;

{%- endif %}

            read_wait <= 0;
            write_wait <= 0;

          end else if(req_deq && req_head_read_enable) begin
            if(req_head_word_size == 0) begin
              // do nothing
            end else begin
              state <= ST_READ_FROM_BRAM;
            end

            cur_ext_addr <= addrmask(req_head_ext_addr);

{%- if memory.scattergather %}
            cur_core_addr <= req_head_core_addr;
 {%- if (log(memory.numranks,2) % 1.0) == 0.0 %}
            cur_word_size <= req_head_word_size << LOG_NUM_RANKS;
 {%- else %}
            cur_word_size <= (req_head_word_size << (LOG_NUM_RANKS-1)) + {% for rank in range(memory.numranks - 2**(memory.lognumranks-1)) %}req_head_word_size{% if loop.index < memory.numranks - 2**(memory.lognumranks-1) %} + {% endif %}{% endfor %};
 {%- endif %}

            cur_rank <= 0;   
            d_cur_rank <= 0;
            dd_cur_rank <= 0;

            d_core_read_active <= 0;
            dd_core_read_active <= 0;

{%- else %}

            cur_core_addr <= req_head_core_addr[W_A-1:0];
            cur_word_size <= req_head_word_size << LOG_NUM_RANKS;

            cur_rank <= 0;   
            d_cur_rank <= 0;
            dd_cur_rank <= 0;

            cur_page <= req_head_core_addr >> W_A;
            d_cur_page <= req_head_core_addr >> W_A;
            dd_cur_page <= req_head_core_addr >> W_A;

            d_core_read_active <= 0;
            dd_core_read_active <= 0;
            
{%- endif %}

            read_wait <= 0;
            write_wait <= 0;
          end
        end

        //----------------------------------------------------------------------
        ST_WRITE_TO_BRAM: begin
          if(!read_wait) begin
            ext_addr <= cur_ext_addr;
            ext_read_enable <= 1;
            ext_word_size <= min3(cur_word_size, get_rest_for_boundary(cur_ext_addr), MAX_BURST_LEN);
            read_count <= min3(cur_word_size, get_rest_for_boundary(cur_ext_addr), MAX_BURST_LEN);
            read_wait <= 1;
          end

          if(core_write_active) begin
            read_count <= read_count - 1;

{%- if memory.scattergather %}

 {%- for bank in range(memory.length) %}
            core_addr_{{ bank }} <= cur_core_addr;
            core_write_enable_{{ bank }} <= core_write_active && bank_write_active_{{ bank }};
  {%- if memory.datawidth <= memory.ext_datawidth %}
            core_write_data_{{ bank }} <= ext_read_data[{{ (memory.datawidth * (bank+1) -1) % memory.ext_datawidth }}:{{ (memory.datawidth * bank) % memory.ext_datawidth }}];
  {%- else %}
            core_write_data_{{ bank }} <= { ext_read_data, core_write_data_{{ bank }}[W_D-1:W_EXT_D] };
  {%- endif %}
 {%- endfor %}

            if(cur_rank < NUM_RANKS-1) begin
              cur_rank <= cur_rank + 1;
            end else begin
              cur_rank <= 0;
              cur_core_addr <= cur_core_addr + 1;
            end

{%- else %}

 {%- for bank in range(memory.length) %}
            core_addr_{{ bank }} <= cur_core_addr;
            core_write_enable_{{ bank }} <= core_write_active && bank_write_active_{{ bank }};
  {%- if memory.datawidth <= memory.ext_datawidth %}
            core_write_data_{{ bank }} <= ext_read_data;
  {%- else %}
            core_write_data_{{ bank }} <= { ext_read_data, core_write_data_{{ bank }}[W_D-1:W_EXT_D] };
  {%- endif %}
 {%- endfor %}

            if(cur_rank < NUM_RANKS-1) begin
              cur_rank <= cur_rank + 1;
            end else if(cur_core_addr < 2**W_A-1) begin
              cur_core_addr <= cur_core_addr + 1;
              cur_rank <= 0;
            end else begin
              cur_core_addr <= 0;
              cur_rank <= 0;
              cur_page <= cur_page + 1;
            end
            
{%- endif %}
          end

          if(read_wait && ext_ready) begin
            ext_read_enable <= 0;
            cur_ext_addr <= cur_ext_addr + (ext_word_size << EXT_SIZE_OFFSET);
            cur_word_size <= cur_word_size - ext_word_size;
          end

          if(read_wait && !ext_read_enable && read_count == 0) begin
            if(cur_word_size == 0) begin
              state <= ST_IDLE;
            end else begin
              state <= ST_WRITE_TO_BRAM;
              read_wait <= 0;
            end
          end

        end

        //----------------------------------------------------------------------
        ST_READ_FROM_BRAM: begin
{%- for bank in range(memory.length) %}
          core_addr_{{ bank }} <= cur_core_addr;
          core_read_enable_{{ bank }} <= core_read_active && bank_read_active_{{ bank }};
{%- endfor %}

{%- if memory.scattergather %}


 {%- if memory.datawidth <= memory.ext_datawidth %}
          ext_write_data <= 
  {%- for rank in range(memory.numranks) %}
                            (dd_cur_rank == {{ rank }})? { {% for b in range(int(memory.length/memory.numranks)-1, -1, -1) %}core_read_data_{{ rank * int(memory.length/memory.numranks) + b }}{% if loop.index < int(memory.length/memory.numranks) %}, {% endif %}{% endfor %} }:
  {%- endfor %}
                            'hx;
 {%- else %}
          ext_write_data <= 
  {%- for rank in range(memory.numranks) %}
                            (dd_cur_rank == {{ rank }})? core_read_data_{{ int(rank / int(memory.datawidth/memory.ext_datawidth)) }}[{{ (rank % int(memory.datawidth/memory.ext_datawidth)) + 1 }}*W_EXT_D-1:{{ (rank % int(memory.datawidth/memory.ext_datawidth)) }}*W_EXT_D]:
  {%- endfor %}
                            'hx;
 {%- endif %}


{%- else %}


 {%- if memory.datawidth <= memory.ext_datawidth %}
          ext_write_data <= 
  {%- for page in range(memory.numpages) %}
                            (dd_cur_page == {{ page }})? core_read_data_{{ page }}:
  {%- endfor %}
                            'hx;
 {%- else %}
          ext_write_data <= 
  {%- for page in range(memory.numpages) %}
                            (dd_cur_page == {{ page }})?
                              (
   {%- for rank in range(memory.numranks) %}
                                (dd_cur_rank == {{ rank }})? core_read_data_{{ page }}[{{ (rank + 1)* memory.ext_datawidth }}:{{ rank * memory.ext_datawidth }}]:
   {%- endfor %}
                                'hx
                              ):
  {%- endfor %}
                            'hx;
 {%- endif %}


{%- endif %}

{%- if memory.datawidth <= memory.ext_datawidth %}
          ext_write_enq <= write_wait && dd_core_read_active;
{%- else %}
          ext_write_enq <= write_wait && dd_core_read_active;
{%- endif %}

          d_core_read_active <= core_read_active;
          dd_core_read_active <= d_core_read_active;

          d_cur_rank <= cur_rank;
          dd_cur_rank <= d_cur_rank;

{%- if not memory.scattergather %}
          d_cur_page <= cur_page;
          dd_cur_page <= d_cur_page;
{%- endif %}

          if(!write_wait) begin
            ext_addr <= cur_ext_addr;
            ext_write_enable <= 1;
            ext_word_size <= min3(cur_word_size, get_rest_for_boundary(cur_ext_addr), MAX_BURST_LEN);
            write_count <= min3(cur_word_size, get_rest_for_boundary(cur_ext_addr), MAX_BURST_LEN);
            write_wait <= 1;
          end

          if(core_read_active) begin
            write_count <= write_count - 1;
{%- if memory.scattergather %}
            if(cur_rank < NUM_RANKS-1) begin
              cur_rank <= cur_rank + 1;
            end else begin
              cur_rank <= 0;
              cur_core_addr <= cur_core_addr + 1;
            end
{%- else %}
            if(cur_rank < NUM_RANKS-1) begin
              cur_rank <= cur_rank + 1;
            end else if(cur_core_addr < 2**W_A-1) begin
              cur_core_addr <= cur_core_addr + 1;
              cur_rank <= 0;
            end else begin
              cur_core_addr <= 0;
              cur_rank <= 0;
              cur_page <= cur_page + 1;
            end
{%- endif %}
          end

          if(write_wait && ext_ready) begin
            ext_write_enable <= 0;
            cur_ext_addr <= cur_ext_addr + (ext_word_size << EXT_SIZE_OFFSET);
            cur_word_size <= cur_word_size - ext_word_size;
          end

          if(write_wait && !ext_write_enable && write_count == 0) begin
            if(cur_word_size == 0) begin
              state <= ST_IDLE;
            end else begin
              state <= ST_READ_FROM_BRAM;
              write_wait <= 0;
            end
          end

        end
      endcase
    end
  end
  
endmodule
{% endfor %}
// Thread "{{ thread.name }}" END
{%- endfor %}

module dmac_memory_cmd_queue #
  (
   parameter W_EXT_A = 32,
   parameter FIFO_ADDR_WIDTH = 4,
   parameter ASYNC = 1
   )
  (
   // input clock / reset
   input                    tail_clk,
   input                    tail_rst,

   // output clock / reset
   input                    head_clk,
   input                    head_rst,
   
   // input data
   input [W_EXT_A-1:0]      tail_ext_addr, // byte addressing
   input [W_EXT_A-1:0]      tail_core_addr, // word addressing
   input                    tail_read_enable,
   input                    tail_write_enable,
   input [W_EXT_A:0]        tail_word_size, // word

   // output data
   output [W_EXT_A-1:0]     head_ext_addr, // byte addressoutg
   output [W_EXT_A-1:0]     head_core_addr, // word addressoutg
   output                   head_read_enable,
   output                   head_write_enable,
   output [W_EXT_A:0]       head_word_size, // word

   // input enq
   input                    enq,
   output                   full,
   output                   almost_full,

   // output deq
   input                    deq,
   output                   empty,
   output                   almost_empty
   );

  localparam FIFO_DATA_WIDTH = (W_EXT_A) + (W_EXT_A) + (1) + (1) + (W_EXT_A + 1);

  wire [FIFO_DATA_WIDTH-1:0] data_in;
  wire [FIFO_DATA_WIDTH-1:0] data_out;
  
  assign data_in = {tail_ext_addr, tail_core_addr,
                    tail_read_enable, tail_write_enable,
                    tail_word_size};
  assign {head_ext_addr, head_core_addr,
          head_read_enable, head_write_enable,
          head_word_size} = data_out;

  dmac_memory_cmd_fifo #
    (
     .ADDR_LEN(FIFO_ADDR_WIDTH),
     .DATA_WIDTH(FIFO_DATA_WIDTH),
     .ASYNC(ASYNC)
     )
  inst_dmac_memory_cmd_fifo
    (
     .CLK0(head_clk),
     .RST0(head_rst),
     .Q(data_out),
     .DEQ(deq),
     .EMPTY(empty),
     .ALM_EMPTY(almost_empty),
     .CLK1(tail_clk),
     .RST1(tail_rst),
     .D(data_in),
     .ENQ(enq),
     .FULL(full),
     .ALM_FULL(almost_full)
     );
  
endmodule  

module dmac_memory_cmd_fifo(CLK0, RST0, Q, DEQ, EMPTY, ALM_EMPTY,
                            CLK1, RST1, D, ENQ,  FULL,  ALM_FULL);
  parameter ADDR_LEN = 10;
  parameter DATA_WIDTH = 32;
  parameter ASYNC = 1;
  localparam MEM_SIZE = 2 ** ADDR_LEN;

  input                   CLK0;
  input                   RST0;
  output [DATA_WIDTH-1:0] Q;
  input                   DEQ;
  output                  EMPTY;
  output                  ALM_EMPTY;
  
  input                   CLK1;
  input                   RST1;
  input  [DATA_WIDTH-1:0] D;
  input                   ENQ;
  output                  FULL;
  output                  ALM_FULL;

  reg EMPTY;
  reg ALM_EMPTY;
  reg FULL;
  reg ALM_FULL;

  reg [ADDR_LEN-1:0] head;
  reg [ADDR_LEN-1:0] tail;

  reg [ADDR_LEN-1:0] gray_head_cdc_from;
  reg [ADDR_LEN-1:0] gray_tail_cdc_from;

  reg [ADDR_LEN-1:0] d_gray_head_cdc_to;
  reg [ADDR_LEN-1:0] d_gray_tail_cdc_to;

  reg [ADDR_LEN-1:0] dd_gray_head;
  reg [ADDR_LEN-1:0] dd_gray_tail;

  wire ram_we;
  assign ram_we = ENQ && !FULL;

  function [ADDR_LEN-1:0] to_gray;
    input [ADDR_LEN-1:0] in;
    to_gray = in ^ (in >> 1);
  endfunction

  function [ADDR_LEN-1:0] mask;
    input [ADDR_LEN-1:0] in;
    mask = in[ADDR_LEN-1:0];
  endfunction
  
  generate if(ASYNC) begin
    // Read Pointer
    always @(posedge CLK0) begin
      if(RST0) begin
        head <= 0;
        gray_head_cdc_from <= 0;
      end else begin
        if(!EMPTY && DEQ) head <= head == (MEM_SIZE-1)? 0 : head + 1;
        if(!EMPTY && DEQ) gray_head_cdc_from <= head == (MEM_SIZE-1)? to_gray(0) : to_gray(head + 1);
      end
    end
  
    // Write Pointer
    always @(posedge CLK1) begin
      if(RST1) begin
        tail <= 0;
        gray_tail_cdc_from <= 0;
      end else begin
        if(!FULL && ENQ) tail <= tail == (MEM_SIZE-1)? 0 : tail + 1;
        if(!FULL && ENQ) gray_tail_cdc_from <= tail == (MEM_SIZE-1)? to_gray(0) : to_gray(tail + 1);
      end
    end

    // Read Pointer (CLK0 -> CLK1)
    always @(posedge CLK1) begin
      d_gray_head_cdc_to <= gray_head_cdc_from;
      dd_gray_head <= d_gray_head_cdc_to;
    end
    
    // Write Pointer (CLK1 -> CLK0)
    always @(posedge CLK0) begin
      d_gray_tail_cdc_to <= gray_tail_cdc_from;
      dd_gray_tail <= d_gray_tail_cdc_to;
    end

    always @(posedge CLK0) begin
      if(RST0) begin
        EMPTY <= 1'b1;
        ALM_EMPTY <= 1'b1;
      end else begin
        if(DEQ && !EMPTY) begin
          EMPTY <= (dd_gray_tail == to_gray(head+1));
          ALM_EMPTY <= (dd_gray_tail == to_gray(head+2)) || (dd_gray_tail == to_gray(head+1));
        end else begin
          EMPTY <= (dd_gray_tail == to_gray(head));
          ALM_EMPTY <= (dd_gray_tail == to_gray(head+1)) || (dd_gray_tail == to_gray(head));
        end
      end
    end

    always @(posedge CLK1) begin
      if(RST1) begin
        FULL <= 1'b0;
        ALM_FULL <= 1'b0;
      end else begin
        if(ENQ && !FULL) begin
          FULL <= (dd_gray_head == to_gray(tail+2));
          ALM_FULL <= (dd_gray_head == to_gray(tail+3)) || (dd_gray_head == to_gray(tail+2));
        end else begin
          FULL <= (dd_gray_head == to_gray(tail+1));
          ALM_FULL <= (dd_gray_head == to_gray(tail+2)) || (dd_gray_head == to_gray(tail+1));
        end
      end
    end

    dmac_memory_cmd_fifo_ram #(.W_A(ADDR_LEN), .W_D(DATA_WIDTH))
    ram (.CLK0(CLK0), .ADDR0(head), .D0('h0), .WE0(1'b0), .Q0(Q), // read
         .CLK1(CLK1), .ADDR1(tail), .D1(D), .WE1(ram_we), .Q1()); // write

  end else begin

    // Read Pointer
    always @(posedge CLK0) begin
      if(RST0) begin
        head <= 0;
      end else begin
        if(!EMPTY && DEQ) head <= head == (MEM_SIZE-1)? 0 : head + 1;
      end
    end
  
    // Write Pointer
    always @(posedge CLK0) begin
      if(RST0) begin
        tail <= 0;
      end else begin
        if(!FULL && ENQ) tail <= tail == (MEM_SIZE-1)? 0 : tail + 1;
      end
    end

    always @(posedge CLK0) begin
      if(RST0) begin
        EMPTY <= 1'b1;
        ALM_EMPTY <= 1'b1;
      end else begin
        if(DEQ && !EMPTY) begin
          if(ENQ && !FULL) begin
            EMPTY <= (mask(tail+1) == mask(head+1));
            ALM_EMPTY <= (mask(tail+1) == mask(head+2)) || (mask(tail+1) == mask(head+1));
          end else begin
            EMPTY <= (tail == mask(head+1));
            ALM_EMPTY <= (tail == mask(head+2)) || (tail == mask(head+1));
          end
        end else begin
          if(ENQ && !FULL) begin
            EMPTY <= (mask(tail+1) == mask(head));
            ALM_EMPTY <= (mask(tail+1) == mask(head+1)) || (mask(tail+1) == mask(head));
          end else begin
            EMPTY <= (tail == mask(head));
            ALM_EMPTY <= (tail == mask(head+1)) || (tail == mask(head));
          end
        end
      end
    end

    always @(posedge CLK0) begin
      if(RST0) begin
        FULL <= 1'b0;
        ALM_FULL <= 1'b0;
      end else begin
        if(ENQ && !FULL) begin
          if(DEQ && !EMPTY) begin
            FULL <= (mask(head+1) == mask(tail+2));
            ALM_FULL <= (mask(head+1) == mask(tail+3)) || (mask(head+1) == mask(tail+2));
          end else begin
            FULL <= (head == mask(tail+2));
            ALM_FULL <= (head == mask(tail+3)) || (head == mask(tail+2));
          end
        end else begin
          if(DEQ && !EMPTY) begin
            FULL <= (mask(head+1) == mask(tail+1));
            ALM_FULL <= (mask(head+1) == mask(tail+2)) || (mask(head+1) == mask(tail+1));
          end else begin
            FULL <= (head == mask(tail+1));
            ALM_FULL <= (head == mask(tail+2)) || (head == mask(tail+1));
          end
        end
      end
    end

    dmac_memory_cmd_fifo_ram #(.W_A(ADDR_LEN), .W_D(DATA_WIDTH))
    ram (.CLK0(CLK0), .ADDR0(head), .D0('h0), .WE0(1'b0), .Q0(Q), // read
         .CLK1(CLK0), .ADDR1(tail), .D1(D), .WE1(ram_we), .Q1()); // write

  end endgenerate

endmodule

module dmac_memory_cmd_fifo_ram(CLK0, ADDR0, D0, WE0, Q0,
                                CLK1, ADDR1, D1, WE1, Q1);
  parameter W_A = 10;
  parameter W_D = 32;
  localparam LEN = 2 ** W_A;
  input            CLK0;
  input  [W_A-1:0] ADDR0;
  input  [W_D-1:0] D0;
  input            WE0;
  output [W_D-1:0] Q0;
  input            CLK1;
  input  [W_A-1:0] ADDR1;
  input  [W_D-1:0] D1;
  input            WE1;
  output [W_D-1:0] Q1;
  
  reg [W_A-1:0] d_ADDR0;
  reg [W_A-1:0] d_ADDR1;
  reg [W_D-1:0] mem [0:LEN-1];
  
  always @(posedge CLK0) begin
    if(WE0) mem[ADDR0] <= D0;
    d_ADDR0 <= ADDR0;
  end
  always @(posedge CLK1) begin
    if(WE1) mem[ADDR1] <= D1;
    d_ADDR1 <= ADDR1;
  end
  assign Q0 = mem[d_ADDR0];
  assign Q1 = mem[d_ADDR1];
endmodule

